#!/bin/sh
#
# Copyright (c) 2022 Alexander MÃ¶ller <alexander.moeller@fu-berlin.de>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

primary_box='malcha'
user_name='alexanderm'

_debug=0
_home=0
_scratch=0

_opt_box=0
_box=${_box:-${primary_box}}

_timestamp=$(date +%F-%H%M%S)

check_input() {
	[ "${_scratch}" -eq 1 ] && [ "${_home}" -eq 1 ] \
		&& printf "%s\n\n" "Decide between scratch and home." \
		&& usage
}

check_uni() {
	if hostname --fqdn | grep 'physik.fu-berlin.de' ; then
		# within uni network
		if [ "${_opt_box}" -eq 0 ] ; then
			printf "%s\n\n" "You're in the uni network. Specify remote hostname."
			usage
		else
			build_remote
		fi
	else
		# remotely
		build_remote
	fi
}

debug_output() {
	printf "%s\n\n" "rsync -avzhP -e ssh ${_source} ${_destination}"

	printf "%s\n" "\$_home: ${_home}"
	printf "%s\n" "\$_scratch: ${_scratch}"
	printf "%s\n\n" "\$_opt_box: ${_opt_box}"

	printf "%s\n" "\$0: $0"
	printf "%s\n" "\$1: $1"
	printf "%s\n" "\$2: $2"
	printf "%s\n\n" "\$3: $3"

	printf "%s\n" "\$user_name: ${user_name}"
	printf "%s\n\n" "\$_box: ${_box}"

	printf "%s\n" "\$_address: ${_address}"
	printf "%s\n" "\$_remote_basedir: ${_remote_basedir}"
	printf "%s\n" "\$_source: ${_source}"
	printf "%s\n" "\$_destination: ${_destination}"
}

build_remote() {
	_address="${user_name}@${_box}.physik.fu-berlin.de"
	if [ "${_scratch}" -eq 1 ] ; then
		_remote_basedir="${_address}:/local_scratch/${user_name}"
	elif [ "${_home}" -eq 1 ] ; then
		_remote_basedir="${_address}:/home/${user_name}"
	else
		_remote_basedir="${_address}:"
	fi
}

fetch_data() {
	check_uni

	if [ -n "$2" ] ; then
		_source="${_remote_basedir}/$2"
	else
		printf "%s\n\n" "Provide a source directory."
		usage
	fi

	if [ -n "$3" ] ; then
		_destination="$3"
	else
		_destination="$HOME/Downloads/ssh_transfer_from_${_timestamp}"
	fi

	transfer_data "$@"
}

send_data() {
	check_uni

	if [ -n "$2" ] ; then
		_source="$2"
	else
		printf "%s\n\n" "Provide a source directory."
		usage
	fi

	if [ -n "$3" ] ; then
		_destination="${_remote_basedir}/$3"
	else
		_destination="${_address}:/home/${user_name}/Downloads/ssh_transfer_from_${_timestamp}"
	fi

	transfer_data "$@"
}

transfer_data() {
	if [ "${_debug}" -eq 0 ] ; then
		rsync -avzhP -e ssh "${_source}" "${_destination}"
		# a -> archive mode
		# v -> verbose mode
		# z -> compress file data during transfer
		# h -> human-readable format
		# P -> --partial --progress: keep partially transferred files, show progress
	else
		debug_output "$@"
	fi
}

usage() { cat << USAGE
${0##*/} - A tool to transfer data between boxes.
usage: ${0##*/}	[-d] [-h] [-s] [-b hostname] command
		source destination
USAGE
	exit 1
}

while getopts b:dhs arg; do
	case ${arg} in
		b) _opt_box=1 && _box="${OPTARG}" ;;
		d) _debug=1 ;;
		h) _home=1 ;;
		s) _scratch=1 ;;
		*) usage
	esac
done
shift $((OPTIND -1))

case $1 in
f*)
	check_input
	fetch_data "$@"
	;;
s*)
	check_input
	send_data "$@"
	;;
*)
	usage
esac
