#!/bin/sh
#
# Copyright (c) 2022 Alexander MÃ¶ller <alexander.moeller@fu-berlin.de>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

[ -n "$FIREFLY_PRIMARY_BOX" ] \
	&& primary_box="$FIREFLY_PRIMARY_BOX"

[ -n "$FIREFLY_PRIMARY_USER" ] \
	&& primary_user="$FIREFLY_PRIMARY_USER" \
	|| primary_user=$(whoami)

_rset="\033[0m"  # reset
_good="\033[32m" # green
_fail="\033[31m" # red

_check=0
_debug=0
_interactive=0

_home=0
_local_scratch=0
_tron_scratch=0

_opt_box=0
_box=${_box:-${primary_box}}
_user_name=${_user_name:-${primary_user}}

_timestamp=$(date +%F-%H%M%S)

check_input() {
	_basedir_sum=$((_home + _local_scratch + _tron_scratch))
	[ "${_basedir_sum}" -gt 1 ] \
		&& printf "${_fail}%s\n%s${_rset}\n\n" "You specified more than one base directory." "Choose at most one of -h, -l, -t" \
		&& usage
	[ -z "${_box}" ] \
		&& printf "${_fail}%s${_rset}\n\n" "You didn't specify a box." \
		&& usage
}

check_uni() {
	if [ "$(dnsdomainname 2> /dev/null)" = 'physik.fu-berlin.de' ] ; then
		# within uni network
		if [ "${_opt_box}" -eq 0 ] ; then
			printf "${_fail}%s${_rset}\n\n" "You're in the uni network. Specify remote hostname."
			usage
		else
			build_remote
		fi
	else
		# remotely
		if [ "${_user_name}" = "$FIREFLY_PRIMARY_USER" ] ; then
			build_remote
		elif [ "${_user_name}" = "${primary_user}" ] ; then
			printf "${_fail}Remote username is %s${_rset}. Are you sure about that? [y/n] " "${_user_name}"
			IFS= read -r _continue
			if [ "${_continue}" = "y" ] ; then
				build_remote
			elif [ "${_continue}" = "n" ] ; then
				printf "Which username do you want to use? "
				IFS= read -r _user_name
				build_remote
			else
				printf "Unknown option.\n"
				check_uni
			fi
		else
			build_remote
		fi
	fi
}

debug_output() {
	if [ -n "${_public_key}" ] ; then
		printf "%s\n" "rsync -avzhP -e \"ssh -i ${_public_key}\" ${_source} ${_destination}"
	else
		printf "%s\n" "rsync -avzhP -e ssh ${_source} ${_destination}"
	fi
	if [ "${_check}" -eq 0 ] ; then
		printf "%s\n" "\$_home: ${_home}"
		printf "%s\n" "\$_local_scratch: ${_local_scratch}"
		printf "%s\n\n" "\$_opt_box: ${_opt_box}"

		printf "%s\n" "\$0: $0"
		printf "%s\n" "\$1: $1"
		printf "%s\n" "\$2: $2"
		printf "%s\n\n" "\$3: $3"

		printf "%s\n" "\$_user_name: ${_user_name}"
		printf "%s\n" "\$FIREFLY_PRIMARY_USER: $FIREFLY_PRIMARY_USER"
		printf "%s\n" "\$primary_user: ${primary_user}"
		printf "%s\n" "\$_box: ${_box}"
		printf "%s\n" "\$FIREFLY_PRIMARY_BOX: $FIREFLY_PRIMARY_BOX"
		printf "%s\n\n" "\$primary_box: ${primary_box}"

		printf "%s\n" "\$_address: ${_address}"
		printf "%s\n" "\$_remote_basedir: ${_remote_basedir}"
		printf "%s\n" "\$_source: ${_source}"
		printf "%s\n" "\$_destination: ${_destination}"
	fi
}

build_interactively() {
	printf '%s' "Choose a remote username: "
	IFS= read -r _user_name
	printf '%s' "Choose a remote basedir:[h(ome), l(ocal scratch), t(ron) scratch] "
	IFS= read -r _base
	if [ "${_base}" = "h" ] ; then
		_home=1
		printf '%s' "Choose a remote hostname: "
		IFS= read -r _box
	elif [ "${_base}" = "l" ] ; then
		_local_scratch=1
		printf '%s' "Choose a remote hostname: "
		IFS= read -r _box
	elif [ "${_base}" = "t" ] ; then
		_tron_scratch=1
		_box='tron'
	else
		printf '%s\n' "No remote basedir provided. You need to later specify the full PATH."
	fi
	build_remote

	printf '%s' "Choose PATH of data to transfer: "
	IFS= read -r _data_dir
	printf '%s' "Choose destination PATH or leave blank for automatic name: "
	IFS= read -r _dest_dir

	case $1 in
		fetch)
			_source="${_remote_basedir}/${_data_dir}"
			if [ -n "${_dest_dir}" ] ; then
				_destination="${_dest_dir}"
			else
				_destination="$HOME/Downloads/ssh_transfer_from_${_timestamp}"
			fi
			;;
		send)
			_source="${_data_dir}"
			if [ -n "${_dest_dir}" ] ; then
				_destination="${_remote_basedir}/${_dest_dir}"
			else
				_destination="${_address}:/home/${_user_name}/Downloads/ssh_transfer_from_${_timestamp}"
			fi
			;;
		*) usage
	esac

	transfer_data
}

build_remote() {
	_address="${_user_name}@${_box}.physik.fu-berlin.de"
	if [ "${_local_scratch}" -eq 1 ] ; then
		_remote_basedir="${_address}:/local_scratch/${_user_name}"
	elif [ "${_home}" -eq 1 ] ; then
		_remote_basedir="${_address}:/home/${_user_name}"
	elif [ "${_tron_scratch}" -eq 1 ] ; then
		_remote_basedir="${_address}:/scratch/${_user_name}"
	else
		_remote_basedir="${_address}:"
	fi
}

fetch_data() {
	if [ "${_interactive}" -eq 0 ] ; then
		check_uni
	else
		build_interactively 'fetch'
	fi

	if [ -n "$2" ] ; then
		_source="${_remote_basedir}/$2"
	else
		printf "%s\n\n" "Provide a source directory."
		usage
	fi

	if [ -n "$3" ] ; then
		_destination="$3"
	else
		_destination="$HOME/Downloads/ssh_transfer_from_${_timestamp}"
	fi

	transfer_data "$@"
}

send_data() {
	if [ "${_interactive}" -eq 0 ] ; then
		check_uni
	else
		build_interactively 'send'
	fi

	if [ -n "$2" ] ; then
		_source="$2"
	else
		printf "%s\n\n" "Provide a source directory."
		usage
	fi

	if [ -n "$3" ] ; then
		_destination="${_remote_basedir}/$3"
	else
		_destination="${_address}:/home/${_user_name}/Downloads/ssh_transfer_from_${_timestamp}"
	fi

	transfer_data "$@"
}

transfer_data() {
	if [ "${_debug}" -eq 1 ] ; then
		debug_output "$@"
	elif [ "${_check}" -eq 1 ] ; then
		debug_output "$@"
		printf '%s' "Apply? [y/n] "
		IFS= read -r _apply
		if [ "${_apply}" = "y" ] ; then
			_check=0 && _debug=0 && transfer_data "$@"
		elif [ "${_apply}" = "n" ] ; then
			exit 0
		else
			printf "Unknown option."
			_check=1 && transfer_data "$@"
		fi
	else
		if [ -n "${_public_key}" ] ; then
			rsync -avzhP -e "ssh -i ${_public_key}" "${_source}" "${_destination}" \
				&& printf "${_good}%s${_rset}\n" "Transfer completed."
		else
			rsync -avzhP -e ssh "${_source}" "${_destination}" \
				&& printf "${_good}%s${_rset}\n" "Transfer completed."
		fi
		# a -> archive mode
		# v -> verbose mode
		# z -> compress file data during transfer
		# h -> human-readable format
		# P -> --partial --progress: keep partially transferred files, show progress
	fi
}

usage() { cat << USAGE
${0##*/} - A tool to transfer data between boxes.
usage: ${0##*/}	[-c] [-d] [-h] [-i] [-l] [-t] [-b hostname] [-u username] command
		source destination
USAGE
	exit 1
}

while getopts b:k:u:cdhilt arg; do
	case ${arg} in
		b) _opt_box=1 && _box="${OPTARG}" ;;
		c) _check=1 ;;
		d) _debug=1 ;;
		h) _home=1 ;;
		i) _interactive=1 ;;
		k) _public_key="${OPTARG}" ;;
		l) _local_scratch=1 ;;
		t) _tron_scratch=1 && _box="tron" ;;
		u) _user_name="${OPTARG}" ;;
		*) usage
	esac
done
shift $((OPTIND -1))

case $1 in
f*)
	check_input
	fetch_data "$@"
	;;
s*)
	check_input
	send_data "$@"
	;;
*)
	usage
esac
